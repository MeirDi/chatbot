<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlarmClock_Fired" xml:space="preserve">
    <value>Alarm Clock fired</value>
  </data>
  <data name="AlarmClock_Set" xml:space="preserve">
    <value>Alarm Clock set</value>
  </data>
  <data name="AlarmClock_Welcome" xml:space="preserve">
    <value>Please write the time in format - hh:mm</value>
  </data>
  <data name="Calculator_NotDivide" xml:space="preserve">
    <value>Do not divide by zero</value>
  </data>
  <data name="Calculator_Welcome" xml:space="preserve">
    <value>Please type an addition or subtraction or multiplication or division exercise. to exit type exit.</value>
  </data>
  <data name="Countdown_Failed" xml:space="preserve">
    <value>Countdown failed, string input nust represent vaild seconds.</value>
  </data>
  <data name="Countdown_Fired" xml:space="preserve">
    <value>Fired.</value>
  </data>
  <data name="Countdown_Started" xml:space="preserve">
    <value>Countdown started.</value>
  </data>
  <data name="CountWords_Num" xml:space="preserve">
    <value>The number of words is {0}</value>
  </data>
  <data name="CountWords_Stopped" xml:space="preserve">
    <value>Count words stopped.</value>
  </data>
  <data name="CountWords_Welcome" xml:space="preserve">
    <value>Count words started. Enter 'Exit' to stop.</value>
  </data>
  <data name="DataTimeNow_Res" xml:space="preserve">
    <value>The Date is: {0}</value>
  </data>
  <data name="DateConversionToJewish_Welcome" xml:space="preserve">
    <value>Please enter a date: Day/Month/Year</value>
  </data>
  <data name="DiceRoller_Res" xml:space="preserve">
    <value>Your dice numbers are: {0} &amp; {1}</value>
  </data>
  <data name="Echo_Stopped" xml:space="preserve">
    <value>Echo stopped.</value>
  </data>
  <data name="Echo_Welcome" xml:space="preserve">
    <value>Echo started. Enter 'Exit' to stop.</value>
  </data>
  <data name="Factorial_Res" xml:space="preserve">
    <value>The factorial is: {0}</value>
  </data>
  <data name="Factorial_Stopped" xml:space="preserve">
    <value>calculat factorial stopeed..</value>
  </data>
  <data name="Factorial_Welcome" xml:space="preserve">
    <value>insert the number to calculate its factorial, Enter 'Exit' to stop.</value>
  </data>
  <data name="IsPrimeNumber_IsPrime" xml:space="preserve">
    <value>{0} is a prime number.</value>
  </data>
  <data name="IsPrimeNumber_NotPrime" xml:space="preserve">
    <value>{0} is not a prime number, because is divide in {1}</value>
  </data>
  <data name="IsPrimeNumber_Stopped" xml:space="preserve">
    <value>we are sorry that you leave.</value>
  </data>
  <data name="IsPrimeNumber_TryAgin" xml:space="preserve">
    <value>try again, enter a number.</value>
  </data>
  <data name="IsPrimeNumber_Welcome" xml:space="preserve">
    <value>Please type a number:      Enter 'Exit' to stop.</value>
  </data>
  <data name="List_AllList" xml:space="preserve">
    <value>All list tasks: {0}</value>
  </data>
  <data name="List_DeleteTask" xml:space="preserve">
    <value>Delete task: {0}</value>
  </data>
  <data name="List_ErorIncorrectInput" xml:space="preserve">
    <value>Error! Enter 'Add' to add task. Enter 'Delete' to delete task. Enter 'List' to view all list. Enter 'Exit' to stop.</value>
  </data>
  <data name="List_NewTask" xml:space="preserve">
    <value>New task: {0}</value>
  </data>
  <data name="List_Stopped" xml:space="preserve">
    <value>List stopped.</value>
  </data>
  <data name="List_Welcome" xml:space="preserve">
    <value>List started. Enter 'Add' to add task. Enter 'Delete' to delete task. Enter 'List' to view all list. Enter 'Exit' to stop.</value>
  </data>
  <data name="Numerology_Stopped" xml:space="preserve">
    <value>calculat numerology stopeed..</value>
  </data>
  <data name="Numerology_Value" xml:space="preserve">
    <value>The value of  {0} is: {1}</value>
  </data>
  <data name="Numerology_Welcome" xml:space="preserve">
    <value>please type a letter to know the numerology..</value>
  </data>
  <data name="QuadraticEquation_NoSolution" xml:space="preserve">
    <value>The above equation doesn't have any solution!</value>
  </data>
  <data name="QuadraticEquation_OneResult" xml:space="preserve">
    <value>This equation has one result: {0}</value>
  </data>
  <data name="QuadraticEquation_TowResult" xml:space="preserve">
    <value>the first solution is:{0}, the second solution is: {1}</value>
  </data>
  <data name="QuadraticEquation_Welcome" xml:space="preserve">
    <value>Calculate a quadratic equation, Please enter entries of, type ' ' btween an integer: A B C:</value>
  </data>
  <data name="Translate_Stopped" xml:space="preserve">
    <value>Out of translation.</value>
  </data>
  <data name="Translate_Translation" xml:space="preserve">
    <value>the translation language: {0}</value>
  </data>
  <data name="Translate_Welcome" xml:space="preserve">
    <value>Type a sentence to translate. Enter 'len' to which language to translate into. Enter 'Exit' to stop.</value>
  </data>
  <data name="Trivia_EndMessage" xml:space="preserve">
    <value>The trivia stopped, your grade is: {0}</value>
  </data>
  <data name="Trivia_ErrorIncorrectTyping" xml:space="preserve">
    <value>Eror! in order to start enter Start , in order to finish enter EXIT.</value>
  </data>
  <data name="Trivia_ErrorOutScope" xml:space="preserve">
    <value>Your answer is invalid, You need to enter a number between 1 and 4</value>
  </data>
  <data name="Trivia_Question" xml:space="preserve">
    <value>what the result of: {0} * {1} = {2}</value>
  </data>
  <data name="Trivia_Success" xml:space="preserve">
    <value>Vary Good!!!</value>
  </data>
  <data name="Trivia_Welcome" xml:space="preserve">
    <value>Welcome to multiplication table trivia quiz, in order to start enter Start , in order to finish enter EXIT.</value>
  </data>
  <data name="Trivia_Wrong" xml:space="preserve">
    <value>Wrong, the correct answer is {0}</value>
  </data>
</root>